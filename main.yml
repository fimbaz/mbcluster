---
#TODO support 20.10
- hosts: all
  tasks:
    - name: "Add authorized keys"
      copy:
        src: authorized_keys
        dest: /root/.ssh/authorized_keys

    - name: "Add wg0 hosts records"
      lineinfile:
        path: /etc/hosts
        regex: ".* {{hostvars[item].kube_hostname}}$"
        line: "{{hostvars[item].wg0_ip}} {{ hostvars[item].kube_hostname }}"
      loop: "{{groups['kubevpc']}}"

    - name: "Add swap to fstab"
      lineinfile:
        line: "/swap none            swap    sw              0       0"
        path: /etc/fstab
      register: line

    - name: "install swapfile"
      when: "line.changed"      
      block:
        - name: "Create swap file"
          command:
            cmd: "dd if=/dev/zero of=/swap count=10000 bs=1024k"
            creates: /swap
        - command:
            cmd: "mkswap /swap; chmod 600 /swap"
        - command:
            cmd: "swapon -a"

      
    - name: Update all packages to their latest version
      apt:
        name: "*"
        state: latest
        autoremove: yes
        update_cache: yes

    - name: "check if reboot is required"
      stat:
        path: /var/run/reboot-required
      register: reboot_required_cmd
      
    - name: Reboot box if kernel/libs updated and requested by the system
      block:
        - name: "Restarting"
          shell: sleep 10 && /sbin/shutdown -r now 'Rebooting box to update system libs/kernel as needed' 
          async: 300
          poll: 0

        - name: Wait for system to become reachable again
          wait_for_connection:
            delay: 20
            timeout: 300
      when: "reboot_required_cmd.stat.exists"

          
    - name: install ifupdown
      apt:
        name: "{{item}}"
        state: present
        autoremove: yes
      loop: [ifupdown,iptables-persistent]

    - name: "enable persistent ipv4 forwarding via sysctl"
      lineinfile:
        path: /etc/sysctl.conf
        line: "net.ipv4.ip_forward=1"

    - name: "reload sysctl"
      command:
        cmd: "sysctl --system"
          
- hosts: all
  tasks:
    - name: "Install wireguard"
      apt:
        name: wireguard
        state: present
        
    - name: kick
      block:
      - file:
          state: absent
          path: "/etc/wireguard/{{item}}"
        loop: ["wg0.conf","privatekey","publickey"]
      - command:
          cmd: ip link del dev wg0
      tags: [ never ]
          
    - name: "create wireguard keypair"
      block:
      - shell:
          cmd: "wg genkey > /etc/wireguard/privatekey"
          creates: "/etc/wireguard/privatekey"

      - shell:
          cmd: "wg pubkey < /etc/wireguard/privatekey > /etc/wireguard/publickey"
          creates: "/etc/wireguard/publickey"
          
    - name: "retrieve wireguard public key"
      block:
        - slurp:
            src: /etc/wireguard/publickey
          register: slurpfile
        - set_fact:
            cacheable: yes
            wireguard_publickey: "{{ (slurpfile['content'] | b64decode).split('\n') | first }}"

- hosts: all
  tasks:
    - name: "Create wg0.conf "
      blockinfile:
        path: /etc/wireguard/wg0.conf
        create: yes
        marker: "#{mark} WIREGUARD INTERFACE CONFIG\n"
        block: |
          [Interface]
          ListenPort = {{wg0_port}}
          SaveConfig = false
          
    - name: "Create wg0.conf "
      blockinfile:
        path: /etc/network/interfaces
        create: yes
        block: |
          # interfaces(5) file used by ifup(8) and ifdown(8)
          # Include files from /etc/network/interfaces.d:
          source-directory /etc/network/interfaces.d
          
    - name: "Add known peers to wg0.conf"
      blockinfile:
        path: /etc/wireguard/wg0.conf
        marker: "#{mark} PEER {{item}}\n"
        block: |-
          [Peer]
          {% if hostvars[item].wg0_endpoint is defined %}
          Endpoint = {{ hostvars[item].wg0_endpoint }}
          {% endif %}
          PublicKey = {{hostvars[item].wireguard_publickey}}
          AllowedIPs = {{hostvars[item].wg0_ip}}/32
          
      loop: "{{ groups['kubevpc'] | reject('in',[inventory_hostname]) }}"

    - name: "configure wireguard interfaces"
      blockinfile:
        create: yes
        block: |
          auto wg0
          iface wg0 inet static
            address {{wg0_ip}}/24
          pre-up wg-quick up wg0
          pre-up wg set wg0 private-key /etc/wireguard/privatekey
          post-down wg-quick down wg0
        path: /etc/network/interfaces.d/wg0

    - name: "restart wireguard"
      ignore_errors: yes
      command:
        cmd: ifdown wg0
        
    - name: "restart wireguard"
      command:
        cmd: ifup wg0
        
    - name: "Ping peers to validate upness"
      command:
        cmd: "ping -c1 {{hostvars[item].wg0_ip}}"
      loop: "{{ groups['kubevpc'] | reject('in',[inventory_hostname]) }}"

- hosts: all
  tasks:
    - name: "Install snapd"
      apt:
        name: snapd
        state: present

    - name: "Install microk8s"
      community.general.snap:
        name: microk8s
        state: present
        classic: yes
        channel: edge
      
    - name: "get nodes in cluster"
      delegate_to: "{{kubeseed}}"
      delegate_facts: yes
      block:
        - shell:
            cmd: "microk8s kubectl get nodes | tail -n+2 | tr -s ' ' | cut -d ' ' -f1"
          register: get_nodes_cmd
          run_once: yes
        - set_fact:
            cacheable: yes            
            nodes_in_cluster: "{{get_nodes_cmd.stdout.split('\n')}}"
            
    - name: "get ticket and join cluster"
      tags: never
      when:  kube_hostname not in hostvars[kubeseed].nodes_in_cluster
      block:
        - delegate_to: "{{kubeseed}}"
          shell:
            cmd: "microk8s add-node"
          register: nodecmd
        - set_fact:
            node_ticket: '{{nodecmd.stdout.split("\n")[-1].split("/")[-1]}}'
        - shell:
            cmd: "microk8s join {{hostvars[kubeseed].wg0_ip}}:25000/{{node_ticket}}"
          when: inventory_hostname != kubeseed
